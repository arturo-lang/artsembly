assemble: function [blk][
    opConstI0:      from.hex "0x00"
    opConstBT:      from.hex "0x0C"
    opConstBF:      from.hex "0x0D"
    opConstN:       from.hex "0x0F"

    opPush:         from.hex "0x2F"
    opStore:        from.hex "0x4F"
    opLoad:         from.hex "0x6F"
    opCall:         from.hex "0x8F"

    opJump:         from.hex "0x97"
    opJumpIf:       from.hex "0x98"
    opJumpIfNot:    from.hex "0x99"
    opEnd:          from.hex "0x9B"

    opIAdd:         from.hex "0xA0"
    opISub:         from.hex "0xA1"
    opIMul:         from.hex "0xA2"
    opIDiv:         from.hex "0xA3"
    opIMod:         from.hex "0xA5"
    opIPow:         from.hex "0xA6"

    opEq:           from.hex "0xB0"
    opNe:           from.hex "0xB1"
    opGt:           from.hex "0xB2"
    opGe:           from.hex "0xB3"
    opLt:           from.hex "0xB4"
    opLe:           from.hex "0xB5"

    cmdMargin:      from.hex "0x1F"

    consts: new []
    instrs: new []

    getIndexForConstant: function [const][
        idx: index consts const
        if idx = Ã¸ [
            'consts ++ const
            idx: dec size consts
        ]
        return idx
    ]

    addInstruction: function [ins][
        'instrs ++ ins
        return size instrs
    ]

    addCommand: function [const,op][
        i: getIndexForConstant const
        if? i =< 29 -> addInstruction (op - cmdMargin) + i
        else [
            addInstruction i
            addInstruction op
        ]
    ]

    goToLabel: function [op,lbl][
        addInstruction op

        if? set? lbl -> addInstruction dec var lbl
        else -> addInstruction to :string lbl
    ]

    postprocess: function [][
        loop.with: 'i instrs 'instr [
            if in? instr @[opJump opJumpIf opJumpIfNot][
                if string? instrs\[i+1] 
                    -> instrs\[i+1]: var instrs\[i+1]
            ]
        ]
    ]

    push:  function [x][
        case [(type x)=]
            when? [:integer] [
                if? and? x>=0 x=<10 -> addInstruction opConstI0 + x
                else -> addCommand x opPush
            ]
            when? [:boolean] [
                if? x -> addInstruction opConstBT
                else -> addInstruction opConstBF
            ]
            when? [:null] [
                addInstruction opConstN
            ]
            else [
                addCommand x opPush
            ]      
        return dec size instrs
    ]
    store: function [x]-> addCommand x opStore
    load:  function [x]-> addCommand x opLoad
    call:  function [x]-> addCommand x opCall

    iadd:  function []-> addInstruction opIAdd
    isub:  function []-> addInstruction opISub
    imul:  function []-> addInstruction opIMul
    idiv:  function []-> addInstruction opIDiv
    imod:  function []-> addInstruction opIMod
    ipow:  function []-> addInstruction opIPow

    cmpeq: function []-> addInstruction opEq
    cmpne: function []-> addInstruction opNe
    cmpgt: function []-> addInstruction opGt
    cmpge: function []-> addInstruction opGe
    cmplt: function []-> addInstruction opLt
    cmple: function []-> addInstruction opLe

    jmp:        function [x]-> goToLabel opJump x
    jmpif:      function [x]-> goToLabel opJumpIf x
    jmpifnot:   function [x]-> goToLabel opJumpIfNot x

    do.import as.agnostic blk

    'instrs ++ opEnd

    inspect consts
    inspect instrs

    postprocess
    
    return to :bytecode #[
        const: consts
        instructions: instrs
    ]
]